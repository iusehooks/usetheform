"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[80],{7118:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/FormContext","title":"FormContext","description":"A React component that provides a more in-depth context of the \\"Form\\".","source":"@site/docs/components/FormContext.mdx","sourceDirName":"components","slug":"/components/FormContext","permalink":"/usetheform/components/FormContext","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"name":"FormContext"},"sidebar":"tutorialSidebar","previous":{"title":"Form","permalink":"/usetheform/components/Form"},"next":{"title":"Input","permalink":"/usetheform/components/Input"}}');var r=t(1085),o=t(1184),i=t(9250);const a={name:"FormContext"},l="FormContext",c={},d=[{value:"Props",id:"props",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"Reducers",id:"reducers",level:2},{value:"Validation - Sync",id:"validation---sync",level:2},{value:"Validation - Async",id:"validation---async",level:2},{value:"Detailed Explanation:",id:"detailed-explanation",level:4}];function u(e){const n={code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"formcontext",children:"FormContext"})}),"\n",(0,r.jsx)(n.p,{children:'A React component that provides a more in-depth context of the "Form".'}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onInit"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when the Form is initialized."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const onInit = (formState, isFormValid) => { // some operation }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onChange"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when any Form Field changes its value."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const onChange = (formState, isFormValid) => { // some operation }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onReset"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when the form has been reset to its initial State."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const onReset = (formState, isFormValid) => { // some operation }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onSubmit"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when the submit button has been pressed."}),"\n",(0,r.jsx)(n.li,{children:"The function may return either a Promise or a boolean value of true/false."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const onSubmit = (formState) => { // some operation };\r\nconst onSubmit = (formState) => new Promise((resolve, reject) => { // some async operation  });\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cases:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the function returns a Promise which is resolved, it will increment the value named ",(0,r.jsx)(n.strong,{children:"submitted"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the function returns a boolean value ",(0,r.jsx)(n.code,{children:"true"}),", or no return at all, it will increment the value named ",(0,r.jsx)(n.strong,{children:"submitted"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the function returns a Promise which is rejected, the value named ",(0,r.jsx)(n.strong,{children:"submitted"})," will not be incremented."]}),"\n",(0,r.jsxs)(n.li,{children:["If the function returns a boolean value ",(0,r.jsx)(n.code,{children:"false"}),", the value named ",(0,r.jsx)(n.strong,{children:"submitted"})," will not be incremented."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  const { submitted, submitAttempts } = useForm();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It will be only invoked if your form passes all validations added at any level (Collections or Fields)."}),"\n",(0,r.jsxs)(n.li,{children:["For each invocation, the value ",(0,r.jsx)(n.strong,{children:"submitAttempts"})," will be incremented."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"initialState"})}),": object"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It is a plain object that represents the initial state of the form."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reducers"})}),": array | function"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"(nextState, prevState) => nextState\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"An array whose values correspond to different reducer functions."}),"\n",(0,r.jsx)(n.li,{children:"Reducer functions specify how the Form's state changes."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"touched"})}),": boolean"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Default value of ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"true"}),", sync validation messages will be shown but only when the event onBlur of any forms's field is triggered by a user action at any level of nesting."]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import { FormContext, Input, Collection, useSelector } from 'usetheform'\r\nimport { Form } from './MyFormWithContext.ts'\n"})}),"\n",(0,r.jsx)(i.A,{children:'function FormContextBasic() {\n  const Tags = () => {\n    const [tags  = [], setTags] = useSelector(state => state.tags);\n    const resetTag = target =>\n      setTags(prev => prev.filter((val) => val !== target));\n    return tags.map((tag, index) => (\n      <button type="button" style={{ backgroundColor: tag }} key={tag} onClick={() => resetTag(tag)}>\n      Uncheck {tag} Tag\n      </button>\n    ));\n  }\n  const onSubmit = (state) => alert(JSON.stringify(state));\n  return (\n    <FormContext onSubmit={onSubmit}>\n      <Form>\n        <Collection array name="tags" as="div" className="flex space-x-4">\n          <Input type="checkbox" value="Blue" checked placeholder="Tag Blue" />\n          <Input type="checkbox" value="Red" placeholder="Tag Red" />\n          <Input type="checkbox" value="Pink" placeholder="Tag Pink" />\n        </Collection>\n        <button type="submit">Submit</button>\n      </Form>\n      <div className="flex space-x-4">\n        <Tags />\n      </div>\n    </FormContext>\n  );\n  }\n'}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="MyFormWithContext.ts"',children:"import { useForm } from 'usetheform'\r\nexport const Form = ({ children }) => {\r\n  const { onSubmitForm } = useForm();\r\n  return (\r\n    <form onSubmit={onSubmitForm}>\r\n      {children}\r\n    </form>\r\n  );\r\n};\n"})}),"\n",(0,r.jsx)(n.h2,{id:"reducers",children:"Reducers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  import { FormContext, Input } from 'usetheform'\n"})}),"\n",(0,r.jsx)(i.A,{children:'function FormContextWithReducers() {\n  const maxNumber10 = (nextState, prevState) => {\n    if (nextState.myNumber > 10) {\n      nextState.myNumber = 10;\n    }\n    return nextState;\n  };\n  const minNumber1 = (nextState, prevState) => {\n    if (nextState.myNumber <= 1) {\n      nextState.myNumber = 1;\n    }\n    return nextState;\n  };\n  return (\n    <FormContext reducers={[minNumber1, maxNumber10]}>\n      <Form>\n        <Input type="number" name="anyNumber" value="1"  placeholder="Number" />\n      </Form>\n    </FormContext>\n  )\n}\n'}),"\n",(0,r.jsx)(n.h2,{id:"validation---sync",children:"Validation - Sync"}),"\n",(0,r.jsx)(n.p,{children:"Validation at FormContext level:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"touched=false"}),": error messages will be shown on FormContext initialization and when any Field is edited."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"touched=true"}),": error messages will be shown when any Field at any level of nesting is touched/visited."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"  import { FormContext, Input, Collection, useValidation } from 'usetheform'\n"})}),"\n",(0,r.jsx)(i.A,{children:'function FormContextSyncValidation(){\n  const [status, validationProps] = useValidation([({ values }) => ((values && (values["A"] + values["B"] > 10)) ? undefined : "A+B must be > 10")]);\n  return (\n    <FormContext touched {...validationProps}>\n      <Form>\n        <Collection object name="values" >\n          <Input type="number" name="A" placeholder="Number A" value="1" />\n          <Input type="number" name="B" placeholder="Number B" value="2" />\n        </Collection>\n        {status.error && <label className="vl">{status.error}</label>}\n        <button type="submit">Press to see results</button>\n      </Form>\n    </FormContextX>\n  )\n}\n'}),"\n",(0,r.jsx)(n.h2,{id:"validation---async",children:"Validation - Async"}),"\n",(0,r.jsxs)(n.p,{children:["Async Validation for ",(0,r.jsx)(n.strong,{children:"FormContext"})," is triggered on the Submit event. The form submission is prevented if the validation fails.\r\nThis means that the onSubmit function passed as a prop to the ",(0,r.jsx)(n.strong,{children:"FormContext"})," component will not be invoked."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"import { FormContext, Collection, Input, useAsyncValidation } from 'usetheform';\n"})}),"\n",(0,r.jsx)(i.A,{children:'function FormContextAsyncValidation() {\n  const [asyncStatus, validationProps] = useAsyncValidation(asyncTestForm);\n  const onSubmit = (state) => alert(JSON.stringify(state));\n  return (\n    <FormContext onSubmit={onSubmit} {...validationProps}>\n      <Form>\n        <Collection object name="values">\n          <Input type="number" name="a" placeholder="Number A" value="1" />\n          <Input type="number" name="b" placeholder="Number B" value="2" />\n        </Collection>\n        {asyncStatus.status === undefined && <label className="vl">Async Check Not Started Yet</label>}\n        {asyncStatus.status === "asyncStart" && <label className="vl">Checking...</label>}\n        {asyncStatus.status === "asyncError" && <label className="vl">{asyncStatus.value}</label>}\n        {asyncStatus.status === "asyncSuccess" && <label className="vl">{asyncStatus.value}</label>}\n        <Submit />\n      </Form>\n    </FormContext>\n  )\n}\n'}),"\n",(0,r.jsx)(n.h4,{id:"detailed-explanation",children:"Detailed Explanation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Submit.ts"',children:"import { useForm } from 'usetheform'\r\n\r\nconst Submit = () => {\r\n  const { isValid } = useForm();\r\n  return (\r\n    <button disabled={!isValid} type=\"submit\">\r\n      Submit\r\n    </button>\r\n  );\r\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",metastring:'title="AsyncValidations.ts"',children:'export const asyncTestForm = ({ values }) =>\r\n  new Promise((resolve, reject) => {\r\n    // it could be an API call or any async operation\r\n    setTimeout(() => {\r\n      if (!values || !values.a || !values.b) {\r\n        reject("Emtpy values are not allowed ");\r\n      }\r\n      if (values.a + values.b >= 5) {\r\n        reject("The sum must be less than \'5\'");\r\n      } else {\r\n        resolve("Success");\r\n      }\r\n    }, 1000);\r\n  });\n'})})]})}function m(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}}}]);