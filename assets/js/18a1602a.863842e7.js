"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[691],{698:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>i,contentTitle:()=>c,default:()=>m,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"apiReference/createFormStore","title":"createFormStore","description":"createFormStore(initialFormState: Object) creates a read-only form store that holds the state tree of your Form and the hook function to select a \\"Field\\" from the Form state.","source":"@site/docs/apiReference/createFormStore.mdx","sourceDirName":"apiReference","slug":"/apiReference/createFormStore","permalink":"/usetheform/apiReference/createFormStore","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"name":"createFormStore"},"sidebar":"tutorialSidebar","previous":{"title":"useValidation","permalink":"/usetheform/hooks/useValidation"},"next":{"title":"Best Practices","permalink":"/usetheform/BestPractices"}}');var n=t(1085),s=t(1184);const a={name:"createFormStore"},c="createFormStore",i={},l=[{value:"Arguments",id:"arguments",level:2},{value:"Returns",id:"returns",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"\ud83d\ude48 First: create a form store",id:"-first-create-a-form-store",level:3},{value:"\ud83d\ude49 Next: create your awesome Form",id:"-next-create-your-awesome-form",level:3},{value:"\ud83d\ude4a Finally: bind your components, and that&#39;s it!",id:"-finally-bind-your-components-and-thats-it",level:3}];function u(e){const r={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(r.header,{children:(0,n.jsx)(r.h1,{id:"createformstore",children:"createFormStore"})}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.code,{children:"createFormStore(initialFormState: Object)"}),' creates a read-only form store that holds the state tree of your Form and the hook function to select a "Field" from the Form state.']}),"\n",(0,n.jsx)(r.h2,{id:"arguments",children:"Arguments"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"initialFormState"})}),": object"]}),"\n",(0,n.jsx)(r.h2,{id:"returns",children:"Returns"}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:(0,n.jsx)(r.code,{children:"[formStore, useFormSelector]"})})," (",(0,n.jsx)(r.code,{children:"array"}),")\r\nAn array containing:"]}),"\n",(0,n.jsxs)(r.ul,{children:["\n",(0,n.jsxs)(r.li,{children:["A read-only ",(0,n.jsx)(r.code,{children:"formStore"})," to attach to your ",(0,n.jsx)(r.code,{children:"<Form />"})," component."]}),"\n",(0,n.jsxs)(r.li,{children:["A ",(0,n.jsx)(r.code,{children:"useFormSelector"})," hook for selecting specific fields from the form state."]}),"\n"]}),"\n",(0,n.jsx)(r.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,n.jsx)(r.h3,{id:"-first-create-a-form-store",children:"\ud83d\ude48 First: create a form store"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",metastring:'title="awesomeFormStore.tsx"',children:"import { createFormStore } from 'usetheform';\r\n\r\nconst [formStore, useFormSelector] = createFormStore({ counter: 0 });\r\n\r\nexport const awesomeFormStore = formStore;\r\nexport const useAwesomeFormSelector = useFormSelector;\n"})}),"\n",(0,n.jsx)(r.h3,{id:"-next-create-your-awesome-form",children:"\ud83d\ude49 Next: create your awesome Form"}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",metastring:'title="AwesomeForm.tsx"',children:'import { Form } from \'usetheform\';\r\nimport { awesomeFormStore } from \'./formStore\';\r\n\r\nexport default function AwesomeForm() {\r\n  return (\r\n    <>\r\n      <Form formStore={awesomeFormStore}>\r\n        <Input type="number" name="counter" value="0" placeholder="Counter" />\r\n      </Form>\r\n      <Counter />\r\n    </>\r\n  );\r\n}\n'})}),"\n",(0,n.jsx)(r.h3,{id:"-finally-bind-your-components-and-thats-it",children:"\ud83d\ude4a Finally: bind your components, and that's it!"}),"\n",(0,n.jsxs)(r.p,{children:["Use the ",(0,n.jsx)(r.code,{children:"useAwesomeFormSelector"})," hook in any component \u2014 no need for context providers. Just select the state you need, and your component will re-render when it changes."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-tsx",metastring:'title="Counter.tsx"',children:'import { useAwesomeFormSelector } from \'./formStore\'\r\n\r\nexport const Counter = () => {\r\n  const [counter, setCounterValue] = useAwesomeFormSelector((state) => state.counter);\r\n  return (\r\n    <div>\r\n      <span>{counter}</span>\r\n      <button type="button" onClick={() => setCounterValue((prev) => ++prev)}>\r\n        Increase Counter\r\n      </button>\r\n      <button type="button" onClick={() => setCounterValue((prev) => --prev)}>\r\n        Decrease Counter\r\n      </button>\r\n      <button type="button" onClick={() => setCounterValue(0)}>\r\n        Reset Counter\r\n      </button>\r\n    </div>\r\n  );\r\n}\n'})}),"\n",(0,n.jsxs)(r.p,{children:["The ",(0,n.jsx)(r.code,{children:"<Counter />"})," component will re-render on changes."]}),"\n",(0,n.jsxs)(r.p,{children:[(0,n.jsx)(r.strong,{children:"IMPORTANT"}),": You must not select multiple fields in the same call to the selector function. Instead, call the selector separately for each field."]}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"// BAD \ud83d\udc4e \u274c\r\nconst [counter, setCounter] = useFormSelector(state => ({ counter1 : state.counter1, counter2 : state.counter2 }));\n"})}),"\n",(0,n.jsx)(r.pre,{children:(0,n.jsx)(r.code,{className:"language-javascript",children:"// OK \ud83d\udc4d \u2705\r\nconst [counter1, setCounter1] = useFormSelector(state => state.counter1);\r\nconst [counter2, setCounter2] = useFormSelector(state => state.counter2);\n"})})]})}function m(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,n.jsx)(r,{...e,children:(0,n.jsx)(u,{...e})}):u(e)}}}]);