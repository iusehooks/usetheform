"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[278],{1736:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>r,default:()=>u,frontMatter:()=>c,metadata:()=>a,toc:()=>d});const a=JSON.parse('{"id":"hooks/useAsyncValidation","title":"useAsyncValidation","description":"useAsyncValidation(validator: Function) provides the async validation logic to any Field.","source":"@site/docs/hooks/useAsyncValidation.mdx","sourceDirName":"hooks","slug":"/hooks/useAsyncValidation","permalink":"/usetheform/hooks/useAsyncValidation","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"name":"useAsyncValidation"},"sidebar":"tutorialSidebar","previous":{"title":"TextArea","permalink":"/usetheform/components/TextArea"},"next":{"title":"useCollection","permalink":"/usetheform/hooks/useCollection"}}');var t=s(1085),i=s(1184),l=s(9250);const c={name:"useAsyncValidation"},r="useAsyncValidation",o={},d=[{value:"Arguments",id:"arguments",level:2},{value:"Returns",id:"returns",level:2},{value:"Basic usage",id:"basic-usage",level:2}];function h(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"useasyncvalidation",children:"useAsyncValidation"})}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.code,{children:"useAsyncValidation(validator: Function)"})," provides the async validation logic to any Field."]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"  const [asyncStatus, validationAsyncAttr] = useAsyncValidation(fn);\n"})}),"\n",(0,t.jsx)(n.h2,{id:"arguments",children:"Arguments"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"validator"})}),": function"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A function which receives the value of the field and returns a promise."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"returns",children:"Returns"}),"\n",(0,t.jsxs)(n.p,{children:["(",(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"validationAsyncProps"})}),"): array"]}),"\n",(0,t.jsx)(n.p,{children:"An array that holds:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"asyncStatus"})}),": object"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["A plain object that holds a prop named ",(0,t.jsx)(n.code,{children:"status"})," and a prop named ",(0,t.jsx)(n.code,{children:"value"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"status"})})," might be one of the following:"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:'"undefined" : async validation did not start yet'}),"\n",(0,t.jsx)(n.li,{children:'"asyncStart" : async validation has started'}),"\n",(0,t.jsx)(n.li,{children:'"asyncSuccess" : the promise has been resolved with success'}),"\n",(0,t.jsx)(n.li,{children:'"asyncError" : the promise has been rejected'}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"value"})})," is the value returned by the promise"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:(0,t.jsx)(n.code,{children:"validationAsyncAttr"})}),": object"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"A plain object which contains all the props that must be spreaded to the Field."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-javascript",children:"  import { Form, Input, useAsyncValidation } from 'usetheform'\n"})}),"\n",(0,t.jsx)(l.A,{children:'function FormAsyncValidation() {\n  const asyncTest = value =>\n    new Promise((resolve, reject) => {\n      setTimeout(() => {\n        if (value.length <= 3) {\n          reject("Error");\n        } else resolve("Success");\n      }, 1500);\n    });\n  const [asyncStatus, validationProps] = useAsyncValidation(asyncTest)\n  return (\n    <Form>\n      <Input type="text" name="name" touched placeholder="Name" {...validationProps} />\n      {asyncStatus.status === undefined && <label className="vl">Async Check Not Started Yet</label>}\n      {asyncStatus.status === "asyncStart" && <label className="vl">Checking...</label>}\n      {asyncStatus.status === "asyncError" && <label className="vl">{asyncStatus.value}</label>}\n      {asyncStatus.status === "asyncSuccess" && <label className="vl">{asyncStatus.value}</label>}\n    </Form>\n  )\n}'})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}}}]);