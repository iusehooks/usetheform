"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[606],{3992:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>m,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>l});const r=JSON.parse('{"id":"BestPractices","title":"Best Practices","description":"This guide outlines recommended patterns and practices when working with usetheform to help you build efficient, maintainable form solutions.","source":"@site/docs/BestPractices.mdx","sourceDirName":".","slug":"/BestPractices","permalink":"/usetheform/BestPractices","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"title":"Best Practices","sidebar_position":5},"sidebar":"tutorialSidebar","previous":{"title":"createFormStore","permalink":"/usetheform/apiReference/createFormStore"},"next":{"title":"Material UI - React Select","permalink":"/usetheform/MaterialuiReactselect"}}');var o=t(1085),i=t(1184);const a={title:"Best Practices",sidebar_position:5},s="Best Practices",m={},l=[{value:"Breaking Down Complex Forms",id:"breaking-down-complex-forms",level:3},{value:"Using Reducers for Complex State Transformations",id:"using-reducers-for-complex-state-transformations",level:3},{value:"Validating a Form Using Joi Schema",id:"validating-a-form-using-joi-schema",level:3},{value:"File Upload with FormData",id:"file-upload-with-formdata",level:3},{value:"Conditional Validation",id:"conditional-validation",level:3},{value:"Multi-Step / Wizard Forms",id:"multi-step--wizard-forms",level:3}];function c(e){const n={code:"code",em:"em",h1:"h1",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.header,{children:(0,o.jsx)(n.h1,{id:"best-practices",children:"Best Practices"})}),"\n",(0,o.jsxs)(n.p,{children:["This guide outlines recommended patterns and practices when working with ",(0,o.jsx)(n.strong,{children:"usetheform"})," to help you build efficient, maintainable form solutions."]}),"\n",(0,o.jsx)(n.h3,{id:"breaking-down-complex-forms",children:"Breaking Down Complex Forms"}),"\n",(0,o.jsx)(n.p,{children:"For large forms, consider breaking them into logical sections using the Collection component:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="ProfileForm.tsx"',children:'import { Form, Collection, Input } from "usetheform";\n\nconst ProfileForm = () => (\n  <Form onSubmit={values => console.log(values)}>\n    <Collection object name="personalInfo">\n      <Input name="firstName" />\n      <Input name="lastName" />\n      <Input type="email" name="email" />\n    </Collection>\n\n    <Collection object name="addressInfo">\n      <Input name="street" />\n      <Input name="city" />\n      <Input name="zipCode" />\n    </Collection>\n\n    <button type="submit">Submit</button>\n  </Form>\n);\n'})}),"\n",(0,o.jsx)(n.h3,{id:"using-reducers-for-complex-state-transformations",children:"Using Reducers for Complex State Transformations"}),"\n",(0,o.jsx)(n.p,{children:"When you need to transform input data in complex ways, use reducers:"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="ShippingForm.tsx"',children:'import { Form, Input} from "usetheform";\nimport { ReducerFn } from "usetheform/types";\n\ninterface ShippingFormState {\n  name: string;\n  phone: string;\n  zip: string;\n}\n\n// Capitalize first letter of each word\nconst nameReducer: ReducerFn<string, ShippingFormState> = (\n  value: string = ""\n) => value.replace(/\\b\\w/g, (char) => char.toUpperCase());\n\n// Format phone number as (XXX) XXX-XXXX\nconst phoneReducer: ReducerFn<string, ShippingFormState> = (\n  value: string = ""\n) => {\n  const digits = value.replace(/\\D/g, "").slice(0, 10);\n  const parts = [\n    digits.slice(0, 3),\n    digits.slice(3, 6),\n    digits.slice(6, 10),\n  ].filter(Boolean);\n  if (parts.length === 0) return "";\n  if (parts.length === 1) return `(${parts[0]}`;\n  if (parts.length === 2) return `(${parts[0]}) ${parts[1]}`;\n  return `(${parts[0]}) ${parts[1]}-${parts[2]}`;\n};\n\n// Normalize ZIP code to 5-digit numeric string\nconst zipReducer: ReducerFn<string, ShippingFormState> = (value) =>\n  (value || "").replace(/\\D/g, "").slice(0, 5);\n\nconst ShippingForm = () => {\n  return (\n    <Form<ShippingFormState> onSubmit={(state, isFormValid) => console.log("Form Data:", state, isFormValid)}>\n      <Input\n        type="text"\n        name="name"\n        reducers={[nameReducer]}\n        placeholder="e.g. john doe"\n      />\n      <Input\n        type="text"\n        name="phone"\n        reducers={[phoneReducer]}\n        placeholder="e.g. (123) 456-7890"\n      />\n      <Input\n        type="text"\n        name="zip"\n        reducers={[zipReducer]}\n        placeholder="e.g. 90210"\n      />\n      <button type="submit">Submit</button>\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.h3,{id:"validating-a-form-using-joi-schema",children:"Validating a Form Using Joi Schema"}),"\n",(0,o.jsxs)(n.p,{children:["You can pass an ",(0,o.jsx)(n.code,{children:"asyncValidator"})," to the ",(0,o.jsx)(n.code,{children:"<Form>"})," component to run Joi validation against the entire form state."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="JoiFormExample.tsx"',children:'import { Form, Input, useAsyncValidation } from "usetheform";\nimport { ReducerFn, AsyncValidatorFn } from "usetheform/types";\n\nconst schema = Joi.object<UserForm>({\n  username: Joi.string().min(3).required(),\n  email: Joi.string()\n    .email({ tlds: { allow: false } })\n    .required(),\n  age: Joi.number().integer().min(18).required(),\n});\n\nconst joiValidator: AsyncValidatorFn<UserForm> = async (value) => {\n  try {\n    await schema.validateAsync(value, { abortEarly: true });\n    return Promise.resolve("Success!");\n  } catch (err) {\n    const error = err as Joi.ValidationError;\n    return Promise.reject(error.details.map((d) => d.message).join("; "));\n  }\n};\n\nfunction JoiFormExample() {\n  const [asyncStatus, asyncValidationProp] = useAsyncValidation(joiValidator);\n  return (\n    <div>\n      <Form<UserForm>\n        {...asyncValidationProp}\n        onSubmit={(formData, isFormValid) => {\n          console.log(JSON.stringify(formData, null, 2), isFormValid);\n        }}\n      >\n        <div className="field">\n          <label>Username</label>\n          <Input<UserForm["username"]> name="username" type="text" />\n        </div>\n\n        <div className="field">\n          <label>Email</label>\n          <Input<UserForm["email"]> name="email" type="email" />\n        </div>\n\n        <div className="field">\n          <label>Age</label>\n          <Input<UserForm["age"]> name="age" type="number" />\n        </div>\n\n        <button type="submit">Submit</button>\n      </Form>\n      {asyncStatus.status === "asyncError" && (\n        <label>{asyncStatus.value}</label>\n      )}\n    </div>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"file-upload-with-formdata",children:"File Upload with FormData"}),"\n",(0,o.jsxs)(n.p,{children:["You can easily integrate file uploads in your form using ",(0,o.jsx)(n.code,{children:"FormData"}),". Here's how to handle file input and submit the file to a backend API."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="FileUploadForm.tsx"',children:'import { Form, Input, useForm } from "usetheform";\nimport { OnSubmitFormFn } from "usetheform/types";\n\ntype FileUploadFormState = {\n  file: File;\n};\n\nconst UploadButton = () => {\n  const { submitted, isSubmitting, isValid } = useForm();\n  const disabled = isSubmitting || !isValid || submitted > 0;\n  return (\n    <button type="submit" disabled={disabled}>\n      {isSubmitting && submitted === 0 ? "Uploading..." : "Upload File"}\n    </button>\n  );\n};\n\nconst handleSubmit: OnSubmitFormFn<FileUploadFormState> = async (formState) => {\n  const formData = new FormData();\n  formData.append("file", formState.file);\n\n  try {\n    const response = await fetch("/api/upload", {\n      method: "POST",\n      body: formData,\n    });\n\n    const result = await response.json();\n    return Promise.resolve(result);\n  } catch (error) {\n    return Promise.reject(error);\n  }\n};\n\nfunction FileUploadForm() {\n  return (\n    <Form<FileUploadFormState> onSubmit={handleSubmit}>\n      <Input type="file" name="file" placeholder="Select a File..." required />\n      <UploadButton />\n    </Form>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"conditional-validation",children:"Conditional Validation"}),"\n",(0,o.jsxs)(n.p,{children:["When building dynamic forms, it\u2019s common to require a field ",(0,o.jsx)(n.em,{children:"only"})," under certain conditions \u2014 such as when a checkbox is checked."]}),"\n",(0,o.jsxs)(n.p,{children:["Here\u2019s a best-practice example using ",(0,o.jsx)(n.code,{children:"usetheform"}),":"]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="ConditionalFormExample.tsx"',children:'import { Form, Input, useValidation } from "usetheform";\nimport { OnSubmitFormFn, OnChangeFormFn, ValidatorFn } from "usetheform/types";\n\ninterface MyFormState {\n  petCheckbox: boolean;\n  petName: string;\n}\n\nconst required: ValidatorFn<MyFormState["petName"], MyFormState> = (\n  value,\n  formState\n) =>\n  formState.petCheckbox\n    ? value?.trim()\n      ? undefined\n      : "Pet name is required"\n    : undefined;\n\nexport default function ConditionalFormExample() {\n  const onChange: OnChangeFormFn<MyFormState> = (formState) =>\n    console.log("ON_CHANGE:", formState);\n\n  const onSubmit: OnSubmitFormFn<MyFormState> = (formState) =>\n    console.log("ON_SUBMIT:", formState);\n\n  const [status, validation] = useValidation([required]);\n\n  return (\n    <Form<MyFormState> onSubmit={onSubmit} onChange={onChange}>\n      <label htmlFor="petCheckbox">Do you have a pet?</label>\n      <Input id="petCheckbox" name="petCheckbox" type="checkbox" />\n\n      <Input name="petName" type="text" touched {...validation} />\n      {status.errors?.petName && <span>{status.errors.petName}</span>}\n\n      <button type="submit">Submit</button>\n    </Form>\n  );\n}\n'})}),"\n",(0,o.jsx)(n.h3,{id:"multi-step--wizard-forms",children:"Multi-Step / Wizard Forms"}),"\n",(0,o.jsx)(n.p,{children:"Use multiple formStores and local state to manage step-based forms."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="WizardForm.tsx"',children:'import { useState } from "react";\nimport { createFormStore } from "usetheform";\nimport { StepOne } from "./StepOne";\nimport { StepTwo } from "./StepTwo";\nimport { StepThree } from "./StepThree";\n\nconst [formStoreStepOne] = createFormStore();\nconst [formStoreStepTwo] = createFormStore();\nconst [formStoreStepThree] = createFormStore();\n\nexport const WizardForm = () => {\n  const [step, setStep] = useState<"step1" | "step2" | "step3">("step1");\n\n  const submitWizardForm = () => {\n    const data = {\n      stepOne: formStoreStepOne.getState(),\n      stepTwo: formStoreStepTwo.getState(),\n      stepThree: formStoreStepThree.getState(),\n    };\n    console.log("Form submitted:", data);\n  };\n\n  return (\n    <div>\n      <h2>Multi-Step Wizard</h2>\n      <span>Current Step: {step}</span>\n\n      {step === "step1" && (\n        <StepOne onNext={() => setStep("step2")} formStore={formStoreStepOne} />\n      )}\n      {step === "step2" && (\n        <StepTwo\n          onNext={() => setStep("step3")}\n          onPrev={() => setStep("step1")}\n          formStore={formStoreStepTwo}\n        />\n      )}\n      {step === "step3" && (\n        <StepThree\n          onPrev={() => setStep("step2")}\n          onSubmit={submitWizardForm}\n          formStore={formStoreStepThree}\n        />\n      )}\n    </div>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="StepOne.tsx"',children:'import { Form, Input } from "usetheform";\n\ninterface StepOneFormState {\n  firstname: string;\n  lastname: string;\n}\n\nexport const StepOne = ({ onNext, formStore }) => {\n  return (\n    <Form<StepOneFormState> formStore={formStore} onSubmit={onNext}>\n      <Input\n        name="firstname"\n        placeholder="First Name"\n        validators={[\n          (v) => (!v || v.trim() === "" ? "Required" : undefined),\n          (v) => (v && v.length < 3 ? "Min 3 chars" : undefined),\n        ]}\n      />\n      <Input name="lastname" placeholder="Last Name" />\n      <SubmitButton label="Next" />\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="StepTwo.tsx"',children:'import { Form, Input, Select } from "usetheform";\n\ninterface StepTwoFormState {\n  age: number;\n  gender: "M" | "F" | "O";\n}\n\nexport const StepTwo = ({ onNext, onPrev, formStore }) => {\n  return (\n    <Form<StepTwoFormState> formStore={formStore} onSubmit={onNext}>\n      <Input type="number" name="age" placeholder="Age" />\n      <Select name="gender" validators={[v => ["M", "F", "O"].includes(v) ? undefined : "Required"]}>\n        <option value="">Select gender</option>\n        <option value="M">Male</option>\n        <option value="F">Female</option>\n        <option value="O">Other</option>\n      </Select>\n      <button type="button" onClick={onPrev}>Prev</button>\n      <SubmitButton label="Next" />\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="StepThree.tsx"',children:'import { Form, Input } from "usetheform";\n\ninterface StepThreeFormState {\n  address: string;\n}\n\nexport const StepThree = ({ onPrev, onSubmit, formStore }) => {\n  return (\n    <Form<StepThreeFormState> formStore={formStore} onSubmit={onSubmit}>\n      <Input name="address" placeholder="Address" />\n      <button type="button" onClick={onPrev}>Prev</button>\n      <SubmitButton label="Submit" />\n    </Form>\n  );\n};\n'})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-tsx",metastring:'title="SubmitButton.tsx"',children:'import {\xa0useForm } from "usetheform"\n\nconst SubmitButton = ({ label = "Next" }) => {\n  const { isSubmitting, isValid } = useForm();\n  const disabled = isSubmitting || !isValid;\n  return (\n    <button type="submit" disabled={disabled}>\n      {label}\n    </button>\n  );\n};\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}}}]);