"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[305],{4543:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>a,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"components/Form","title":"Form","description":"The Form is the most important component in usetheform. It renders all the Fields and keeps the entire form state synchronized.","source":"@site/docs/components/Form.mdx","sourceDirName":"components","slug":"/components/Form","permalink":"/usetheform/components/Form","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{"name":"Form"},"sidebar":"tutorialSidebar","previous":{"title":"Collection","permalink":"/usetheform/components/Collection"},"next":{"title":"FormContext","permalink":"/usetheform/components/FormContext"}}');var r=t(1085),l=t(1184),i=t(187);const a={name:"Form"},o="Form",c={},d=[{value:"Props",id:"props",level:2},{value:"Basic usage",id:"basic-usage",level:2},{value:"\ud83d\udcd8 Example 1",id:"-example-1",level:3},{value:"\ud83d\udcd8 Example 2",id:"-example-2",level:3},{value:"Reducers",id:"reducers",level:2},{value:"Detailed Explanation:",id:"detailed-explanation",level:4},{value:"Validation - Sync",id:"validation---sync",level:2},{value:"Validation - Async",id:"validation---async",level:2},{value:"Detailed Explanation:",id:"detailed-explanation-1",level:4}];function m(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"form",children:"Form"})}),"\n",(0,r.jsx)(n.p,{children:"The Form is the most important component in usetheform. It renders all the Fields and keeps the entire form state synchronized."}),"\n",(0,r.jsx)(n.h2,{id:"props",children:"Props"}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onInit"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when the Form is initialized."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const onInit = (formState, isFormValid) => { // some operation }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onChange"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when any Form Field changes its value."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const onChange = (formState, isFormValid) => { // some operation }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onReset"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when the form has been reset to its initial state."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-javascript",children:"const onReset = (formState, isFormValid) => { // some operation }\n"})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"onSubmit"})}),": function"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"A function invoked when the submit button has been pressed."}),"\n",(0,r.jsx)(n.li,{children:"The function may return either a Promise or a boolean value of true/false."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"const onSubmit = (formState) => { // some operation };\r\nconst onSubmit = (formState) => new Promise((resolve, reject) => { // some async operation  });\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["Cases:","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["If the function returns a Promise which is resolved, it will increment the value named ",(0,r.jsx)(n.strong,{children:"submitted"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the function returns a boolean value ",(0,r.jsx)(n.code,{children:"true"})," or no return at all, it will increment the value named ",(0,r.jsx)(n.strong,{children:"submitted"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["If the function returns a Promise which is rejected, the value named ",(0,r.jsx)(n.strong,{children:"submitted"})," will not be incremented."]}),"\n",(0,r.jsxs)(n.li,{children:["If the function returns a boolean value ",(0,r.jsx)(n.code,{children:"false"}),", the value named ",(0,r.jsx)(n.strong,{children:"submitted"})," will not be incremented."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  const { submitted, submitAttempts } = useForm();\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It will be only invoked if the form passes all the validations added at any level (Collections or Fields)."}),"\n",(0,r.jsxs)(n.li,{children:["For each invocation, the value ",(0,r.jsx)(n.strong,{children:"submitAttempts"})," will be incremented."]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"initialState"})}),": object"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"It is a plain object that represents the initial state of the form."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"reducers"})}),": array | function"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"(nextState, prevState) => nextState\n"})}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"An array whose values correspond to different reducing functions."}),"\n",(0,r.jsx)(n.li,{children:"Reducer functions specify how the Form's state changes."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"touched"})}),": boolean"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["Default value of ",(0,r.jsx)(n.em,{children:"false"}),"."]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsxs)(n.p,{children:["If ",(0,r.jsx)(n.em,{children:"true"}),", sync validation messages will be shown only when the event onBlur of any forms's field is triggered by the user action at any level of nesting."]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"action"})}),": string"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"The action attribute specifies where to send the form-data when a form is submitted."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Possible values:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:['An absolute URL - points to another web site (like action="',(0,r.jsx)(n.a,{href:"http://www.example.com/example.html",children:"http://www.example.com/example.html"}),'")']}),"\n",(0,r.jsx)(n.li,{children:'A relative URL - points to a file within a web site (like action="example.html")'}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:(0,r.jsx)(n.code,{children:"innerRef"})}),": object (a mutable ref object)"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"When you need to access the underlying DOM node created by Form (e.g. to call focus), you can use a ref to store a reference to the form dom node."}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:'const ref = useRef(null)\r\n<Form innerRef={ref} name="form">...fields...</Form>\n'})}),"\n",(0,r.jsx)(n.h2,{id:"basic-usage",children:"Basic usage"}),"\n",(0,r.jsx)(n.h3,{id:"-example-1",children:"\ud83d\udcd8 Example 1"}),"\n",(0,r.jsx)(n.p,{children:"A simple form with the initial state passed as Form prop."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"  import { Form, Input } from 'usetheform'\n"})}),"\n",(0,r.jsx)(i.A,{children:'<Form\n  initialState={{ name: "foo", gender: "M", option1: true }}\n  onInit={(state, isFormValid) => console.log("INIT", state, isFormValid)}\n  onChange={(state, isFormValid) => console.log("CHANGE", state, isFormValid)}\n  onSubmit={(state) => alert(JSON.stringify(state))}\n>\n  <Input type="text" name="name" placeholder="Name" />\n  <div className="flex space-x-2">\n    <Input type="radio" name="gender" value="M" placeholder="M" />\n    <Input type="radio" name="gender" value="F" placeholder="F" />\n    <Input type="radio" name="gender" value="Other" placeholder="Other" />\n  </div>\n  <div className="flex space-x-2">\n    <Input type="checkbox" name="option1" placeholder="Option 1" />\n    <Input type="checkbox" name="option2" placeholder="Option 2" />\n  </div>\n  <button type="submit">Submit</button>\n</Form>'}),"\n",(0,r.jsx)(n.h3,{id:"-example-2",children:"\ud83d\udcd8 Example 2"}),"\n",(0,r.jsx)(n.p,{children:"A simple form with the initial state passed straight to the Form's Field."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form, Input } from 'usetheform'\n"})}),"\n",(0,r.jsx)(i.A,{children:'<Form\n  onInit={(state, isFormValid) => console.log("INIT", state, isFormValid)}\n  onChange={(state, isFormValid) => console.log("CHANGE", state, isFormValid)}\n  onSubmit={(state) => alert(JSON.stringify(state))}\n>\n  <Input type="text" name="name" value="foo" placeholder="Name" />\n  <div className="flex space-x-2">\n    <Input type="radio" name="gender" value="M" checked placeholder="M" />\n    <Input type="radio" name="gender" value="F" placeholder="F" />\n    <Input type="radio" name="gender" value="Other" placeholder="Other" />\n  </div>\n  <div className="flex space-x-2">\n    <Input type="checkbox" name="option1" checked placeholder="Option 1" />\n    <Input type="checkbox" name="option2" placeholder="Option 2" />\n  </div>\n  <button type="submit">Submit</button>\n</Form>'}),"\n",(0,r.jsx)(n.h2,{id:"reducers",children:"Reducers"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form, Collection } from 'usetheform';\r\nimport { Item } from './components/Item';\r\nimport { reduceTotalPrice,reduceTotalQuantity } from './components/Item/utils';\n"})}),"\n",(0,r.jsx)(i.A,{children:'<Form reducers={[reduceTotalPrice, reduceTotalQuantity]}>\n  <Collection array name="items">\n    <Item price={5} desc="White Shoes" />\n    <Item price={3} desc="Red Bag" />\n    <Item price={6} desc="Blue Trouser" />\n    { /* try to copy and paste a new item within the items Collection */ }\n  </Collection>\n  <Input type="number" name="totalPrice" readOnly placeholder="Total Price $" />\n  <Input type="number" name="totalQuantity" readOnly placeholder="Total Quantity" />\n</Form>'}),"\n",(0,r.jsx)(n.h4,{id:"detailed-explanation",children:"Detailed Explanation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Item.ts"',children:'export const Item = ({ price, qty, desc }) => {\r\n  return (\r\n    <Collection object>\r\n      <Input type="number" name="price" placeholder="Price" min={1} value={price} />\r\n      <Input type="number" name="qty" placeholder="Quantity" min={1} value={qty} />\r\n      <Input type="text" name="description" placeholder="Description" value={desc} />\r\n    </Collection>\r\n  );\r\n}\r\n\r\nexport const reduceTotalPrice = formState => {\r\n  const { items = [] } = formState;\r\n  const totalPrice = items.reduce((total, { price = 0, qty = 0 }) => {\r\n    total += price * qty;\r\n    return total;\r\n  }, 0);\r\n  return { ...formState, totalPrice };\r\n};\r\n\r\nexport const reduceTotalQuantity = (formState) => {\r\n  const { items = [] } = formState;\r\n  const totalQuantity = items.reduce((total, { qty = 0 }) => {\r\n    total += qty;\r\n    return total;\r\n  }, 0);\r\n  return { ...formState, totalQuantity };\r\n};\n'})}),"\n",(0,r.jsx)(n.h2,{id:"validation---sync",children:"Validation - Sync"}),"\n",(0,r.jsx)(n.p,{children:"Validation at Form level:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"touched=false"}),": error messages will be shown on Form initialization and when any Field is edited."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"touched=true"}),": error messages will be shown when any Field at any level of nesting is touched/visited."]}),"\n"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"  import { Form, Input, Collection, useValidation } from 'usetheform'\n"})}),"\n",(0,r.jsx)(i.A,{children:'function FormSyncValidation() {\n  const graterThan10 = ({ values }) => ((values && (values["A"] + values["B"] > 10)) ? undefined : "A+B must be > 10");\n  const [status, validationProps] = useValidation([graterThan10]);\n  return (\n    <Form touched {...validationProps}>\n      <Collection object name="values" >\n        <Input type="number" name="A" placeholder="Number A" value="1" />\n        <Input type="number" name="B" placeholder="Number B" value="2" />\n      </Collection>\n      {status.error && <label className="vl">{status.error}</label>}\n      <button type="submit">Press to see results</button>\n    </Form>\n  )\n}'}),"\n",(0,r.jsx)(n.h2,{id:"validation---async",children:"Validation - Async"}),"\n",(0,r.jsxs)(n.p,{children:["Async Validation for ",(0,r.jsx)(n.strong,{children:"Form"})," is triggered on Submit event. The form submission is prevented if the validation fails.\r\nIt means that the onSubmit function passed as prop to the ",(0,r.jsx)(n.strong,{children:"Form"})," component will not be invoked."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",children:"import { Form, Collection, Input, useAsyncValidation } from 'usetheform';\n"})}),"\n",(0,r.jsx)(i.A,{children:'function FormAsyncValidation() {\n  const [asyncStatus, validationProps] = useAsyncValidation(asyncTestForm);\n  const onSubmit = (state) => alert(JSON.stringify(state));\n  return (\n    <Form onSubmit={onSubmit} {...validationProps}>\n      <Collection object name="values">\n        <Input type="number" name="a" placeholder="Number A" value="1" />\n        <Input type="number" name="b" placeholder="Number B" value="2" />\n      </Collection>\n      {asyncStatus.status === undefined && <label className="vl">Async Check Not Started Yet</label>}\n      {asyncStatus.status === "asyncStart" && <label className="vl">Checking...</label>}\n      {asyncStatus.status === "asyncError" && <label className="vl">{asyncStatus.value}</label>}\n      {asyncStatus.status === "asyncSuccess" && <label className="vl">{asyncStatus.value}</label>}\n      <Submit />\n    </Form>\n  )\n}'}),"\n",(0,r.jsx)(n.h4,{id:"detailed-explanation-1",children:"Detailed Explanation:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="Submit.ts"',children:"import { useForm } from 'usetheform'\r\n\r\nconst Submit = () => {\r\n  const { isValid } = useForm();\r\n  return (\r\n    <button disabled={!isValid} type=\"submit\">\r\n      Submit\r\n    </button>\r\n  );\r\n};\n"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-jsx",metastring:'title="AsyncValidators.ts"',children:'export const asyncTestForm = ({ values }) =>\r\n  new Promise((resolve, reject) => {\r\n    // it could be an API call or any async operation\r\n    setTimeout(() => {\r\n      if (!values || !values.a || !values.b) {\r\n        reject("Emtpy values are not allowed ");\r\n      }\r\n      if (values.a + values.b >= 5) {\r\n        reject("The sum must be less than \'5\'");\r\n      } else {\r\n        resolve("Success");\r\n      }\r\n    }, 1000);\r\n  });\n'})})]})}function u(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(m,{...e})}):m(e)}}}]);