{"version":3,"sources":["webpack:///../docs/useMultipleForm.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","useState","Playground","Form","Input","useMultipleForm","getWizardStatus","wizardApi","stateWizard","setStateWizard","name","initialState","type","lastname","onClick","JSON","stringify","isMDXComponent"],"mappings":"4RAYaA,G,UAAe,S,0MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,mBADR,mBAGA,qBAAG,0BAAYC,WAAW,KAAvB,uCAAH,gEACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,wEAIL,iBAAQ,CACN,GAAM,WADR,WAGA,yBAAQ,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,YAA/B,YACA,sBACE,kBAAIA,WAAW,MACb,iBAAGA,WAAW,MAAd,wBACA,kBAAIA,WAAW,MACb,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,oBAA5C,6DACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,cAA5C,0EAIN,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,kEAIL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,knBAA+nBC,SAAO,GACvqBL,QACAH,kBACAS,oBACAC,eACAC,SACAC,UACAC,qBAPuqB,gBAQvqBb,IARuqB,EASvqBH,eATuqB,GAUtqBO,QAAQ,eACR,WAAM,MACgCS,cAA9BC,EADF,KACmBC,EADnB,OAEiCN,mBAAS,IAAxCO,EAFF,KAEeC,EAFf,KAGL,OAAO,uBACP,YAAC,IAAD,eAAUF,EAAV,CAAqBG,KAAK,QAAQC,aAAc,CAC5CD,KAAM,OACLd,QAAQ,SACX,YAAC,IAAD,CAAOgB,KAAK,OAAOF,KAAK,OAAOd,QAAQ,WAEzC,YAAC,IAAD,eAAUW,EAAV,CAAqBG,KAAK,QAAQC,aAAc,CAC5CE,SAAU,SACTjB,QAAQ,SACX,YAAC,IAAD,CAAOgB,KAAK,OAAOF,KAAK,WAAWd,QAAQ,WAE7C,sBAAQkB,QAAS,kBAAML,EAAeH,OAAtC,iBACA,uBACE,wBAAOS,KAAKC,UAAUR,e,wMAShCf,EAAWwB,gBAAiB","file":"component---docs-use-multiple-form-mdx-5418cb36c3177caf802a.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/usetheform/usetheform/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { useState } from \"react\";\nimport { Playground } from 'docz';\nimport { Form } from \"./helpers/Form\";\nimport { Input, useMultipleForm } from './../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"usemultipleform\"\n    }}>{`useMultipleForm`}</h1>\n    <p><inlineCode parentName=\"p\">{`useMultipleForm(callback: Function)`}</inlineCode>{` provides the logic to handle the implementation of wizards.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  const [getWizardStatus, wizardApi] = useMultipleForm(callback);\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h2>\n    <p>{`(`}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`helpers`}</inlineCode></strong>{`): array`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`An array that holds:`}</p>\n        <ul parentName=\"li\">\n          <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`getWizardStatus`}</inlineCode></strong>{`: a function that returns the actual state of the wizard.`}</li>\n          <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`wizardApi`}</inlineCode></strong>{`: an object which holds the props that must be spread in each form.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import { Form, Input, useMultipleForm } from 'usetheform'\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const [getWizardStatus, wizardApi] = useMultipleForm()\\n  const [stateWizard, setStateWizard] = useState({})\\n  return (\\n    <div>\\n      <Form {...wizardApi} name=\\\"form1\\\" initialState={{ name: \\'foo\\' }}>\\n        <Input type=\\\"text\\\" name=\\\"name\\\" />\\n      </Form>\\n      <Form {...wizardApi} name=\\\"form2\\\" initialState={{ lastname: \\'mouse\\' }}>\\n        <Input type=\\\"text\\\" name=\\\"lastname\\\" />\\n      </Form>\\n      <button onClick={() => setStateWizard(getWizardStatus())}>\\n        Submit Wizard\\n      </button>\\n      <div>\\n        <code>{JSON.stringify(stateWizard)}</code>\\n      </div>\\n    </div>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      useState,\n      Playground,\n      Form,\n      Input,\n      useMultipleForm,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [getWizardStatus, wizardApi] = useMultipleForm();\n        const [stateWizard, setStateWizard] = useState({});\n        return <div>\n        <Form {...wizardApi} name=\"form1\" initialState={{\n            name: \"foo\"\n          }} mdxType=\"Form\">\n          <Input type=\"text\" name=\"name\" mdxType=\"Input\" />\n        </Form>\n        <Form {...wizardApi} name=\"form2\" initialState={{\n            lastname: \"mouse\"\n          }} mdxType=\"Form\">\n          <Input type=\"text\" name=\"lastname\" mdxType=\"Input\" />\n        </Form>\n        <button onClick={() => setStateWizard(getWizardStatus())}>Submit Wizard</button>\n        <div>\n          <code>{JSON.stringify(stateWizard)}</code>\n        </div>\n      </div>;\n      }}\n    </Playground>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}