(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{ULDZ:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return j}));var a=n("Fcif"),r=n("+I+c"),c=(n("mXGw"),n("/FXl")),o=n("TjRS"),u=n("ZFoC"),l=n("RnGj"),s=n("YPMd"),b=n("8xEu"),p=(n("aD51"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/useSelector.mdx"}});var i={_frontmatter:p},m=o.a;function j(e){var t,n=e.components,j=Object(r.a)(e,["components"]);return Object(c.b)(m,Object(a.a)({},i,j,{components:n,mdxType:"MDXLayout"}),Object(c.b)("h1",{id:"useselector"},"useSelector"),Object(c.b)("p",null,Object(c.b)("inlineCode",{parentName:"p"},"useSelector(selector: Function)"),' allows a user to pick a single "Field" from the form state using a selector function.'),Object(c.b)("h3",{id:"example"},"Example"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"function Counter() {\n  const [counter, setCounter] = useSelector(state => state.counter)\n  return <span>{counter}</span>\n}\n")),Object(c.b)("p",null,"The Counter component will re-render on changes."),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"IMPORTANT"),": Multiple field-selections within the same selector function are not allowed."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// BAD 👎\nconst [counter, setCounter] = useSelector(state => ({ counter1 : state.counter1, counter2 : state.counter2 }));\n")),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"// OK 👍   \nconst [counter1, setCounter1] = useSelector(state => state.counter1);\nconst [counter2, setCounter2] = useSelector(state => state.counter2);\n")),Object(c.b)("h2",{id:"arguments"},"Arguments"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"selector")),": function "),Object(c.b)("h2",{id:"returns"},"Returns"),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},Object(c.b)("inlineCode",{parentName:"strong"},"helpers"))," : array"),Object(c.b)("p",null,"An array that holds the value of the field and a function to update it."),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const [valueField, setFieldValue] = useSelector(state => state.anyprop);\n")),Object(c.b)("p",null,"The ",Object(c.b)("strong",{parentName:"p"},"setFieldValue")," function is used to update the field value. "),Object(c.b)("p",null,"It accepts as an argument:"),Object(c.b)("ul",null,Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"a function which will receive the previous value and return an updated value."),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const [valueField, setFieldValue] = useSelector(state => state.anyprop);\nsetFieldValue(prev => ++prev);\n"))),Object(c.b)("li",{parentName:"ul"},Object(c.b)("p",{parentName:"li"},"a new field value."),Object(c.b)("pre",{parentName:"li"},Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const [valueField, setFieldValue] = useSelector(state => state.anyprop);\nsetFieldValue(newValue);\n")))),Object(c.b)("h2",{id:"basic-usage"},"Basic usage"),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import{ Form, Input } from 'usetheform'\n")),Object(c.b)(u.b,{__position:0,__code:'<Form>\n  <Input type="number" name="counter" value="0" placeholder="Counter" />\n  <CounterReader />\n</Form>',__scope:(t={props:j,DefaultLayout:o.a,Playground:u.b,Form:l.a,CounterReader:s.a,Input:b.a},t.DefaultLayout=o.a,t._frontmatter=p,t),mdxType:"Playground"},Object(c.b)(l.a,{mdxType:"Form"},Object(c.b)(b.a,{type:"number",name:"counter",value:"0",placeholder:"Counter",mdxType:"Input"}),Object(c.b)(s.a,{mdxType:"CounterReader"}))),Object(c.b)("pre",null,Object(c.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'const CounterReader = () => {\n  const [counter, setCounterValue] = useSelector(state => state.counter);\n  return (\n    <div>\n      <span>{counter}</span>\n      <button type="button" onClick={() => setCounterValue(0)}>\n        Reset Counter\n      </button>\n    </div>\n  );\n}\n')))}void 0!==j&&j&&j===Object(j)&&Object.isExtensible(j)&&!j.hasOwnProperty("__filemeta")&&Object.defineProperty(j,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/useSelector.mdx"}}),j.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-use-selector-mdx-b8574c1db2a270997bbe.js.map