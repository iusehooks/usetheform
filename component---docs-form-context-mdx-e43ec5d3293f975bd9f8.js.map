{"version":3,"sources":["webpack:///../docs/FormContext.mdx"],"names":["_frontmatter","name","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","FormContext","Form","asyncTestForm","Submit","Input","useForm","useSelector","Collection","useValidation","useAsyncValidation","onSubmit","state","alert","JSON","stringify","array","type","value","checked","placeholder","tags","setTags","map","tag","index","key","onClick","target","prev","filter","val","reducers","nextState","prevState","myNumber","values","undefined","status","validationProps","touched","object","error","asyncStatus","isMDXComponent"],"mappings":"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","file":"component---docs-form-context-mdx-e43ec5d3293f975bd9f8.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/usetheform/usetheform/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { FormContext, Form } from \"./helpers/FormContext\";\nimport { asyncTestForm } from \"./helpers/utils/index.js\";\nimport { Submit } from \"./helpers/Submit\";\nimport { InputLabel as Input } from \"./helpers/InputLabel\";\nimport { useForm, useSelector, Collection, useValidation, useAsyncValidation } from './../src';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst Tags = makeShortcode(\"Tags\");\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"formcontext\"\n    }}>{`FormContext`}</h1>\n    <p>{`A React component that provides a more in-depth context of the \"Form\".`}</p>\n    <h2 {...{\n      \"id\": \"props\"\n    }}>{`Props`}</h2>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`onInit`}</inlineCode></strong>{`: function`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A function invoked when the Form is initialized.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const onInit = (formState, isFormValid) => { // some operation }\n`}</code></pre>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`onChange`}</inlineCode></strong>{`: function`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A function invoked when any Form Field changes its value.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const onChange = (formState, isFormValid) => { // some operation }\n`}</code></pre>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`onReset`}</inlineCode></strong>{`: function`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A function invoked when the form has been reset to its initial State.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const onReset = (formState, isFormValid) => { // some operation }\n`}</code></pre>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`onSubmit`}</inlineCode></strong>{`: function`}</p>\n    <ul>\n      <li parentName=\"ul\">{`A function invoked when the submit button has been pressed. `}</li>\n      <li parentName=\"ul\">{`The function may return either a Promise or a boolean value of true/false.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`const onSubmit = (formState) => { // some operation };\nconst onSubmit = (formState) => new Promise((resolve, reject) => { // some async operation  });\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`Cases:`}\n        <ul parentName=\"li\">\n          <li parentName=\"ul\">{`If the function returns a Promise which is resolved, it will increment the value named `}<strong parentName=\"li\">{`submitted`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`If the function returns a boolean value `}<inlineCode parentName=\"li\">{`true`}</inlineCode>{`, or no return at all, it will increment the value named `}<strong parentName=\"li\">{`submitted`}</strong>{`.`}</li>\n          <li parentName=\"ul\">{`If the function returns a Promise which is rejected, the value named `}<strong parentName=\"li\">{`submitted`}</strong>{` will not be incremented.`}</li>\n          <li parentName=\"ul\">{`If the function returns a boolean value `}<inlineCode parentName=\"li\">{`false`}</inlineCode>{`, the value named `}<strong parentName=\"li\">{`submitted`}</strong>{` will not be incremented.`}</li>\n        </ul>\n      </li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  const { submitted, submitAttempts } = useForm();\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`It will be only invoked if your form passes all validations added at any level (Collections or Fields).`}</li>\n      <li parentName=\"ul\">{`For each invocation, the value `}<strong parentName=\"li\">{`submitAttempts`}</strong>{` will be incremented.`}</li>\n    </ul>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`initialState`}</inlineCode></strong>{`: object`}</p>\n    <ul>\n      <li parentName=\"ul\">{`It is a plain object that represents the initial state of the form.`}</li>\n    </ul>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`reducers`}</inlineCode></strong>{`: array | function`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`(nextState, prevState) => nextState\n`}</code></pre>\n    <ul>\n      <li parentName=\"ul\">{`An array whose values correspond to different reducer functions.`}</li>\n      <li parentName=\"ul\">{`Reducer functions specify how the Form's state changes.`}</li>\n    </ul>\n    <p><strong parentName=\"p\"><inlineCode parentName=\"strong\">{`touched`}</inlineCode></strong>{`: boolean`}</p>\n    <ul>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`Default value of `}<em parentName=\"p\">{`false`}</em>{`. `}</p>\n      </li>\n      <li parentName=\"ul\">\n        <p parentName=\"li\">{`If `}<em parentName=\"p\">{`true`}</em>{`, sync validation messages will be shown but only when the event onBlur of any forms's field is triggered by a user action at any level of nesting.`}</p>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`import { useForm } from 'usetheform'\nexport const Form = ({ children }) => {\n  const { onSubmitForm } = useForm();\n  return (\n    <form onSubmit={onSubmitForm}>\n      {children}\n    </form>\n  );\n};\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const Tags = () => {\\n    const [tags = [], setTags] = useSelector(state => state.tags)\\n    const resetTag = target =>\\n      setTags(prev => prev.filter(val => val !== target))\\n    return tags.map((tag, index) => (\\n      <button type=\\\"button\\\" key={tag} onClick={() => resetTag(tag)}>\\n        {`${tag} X`}\\n      </button>\\n    ))\\n  }\\n  const onSubmit = state => alert(JSON.stringify(state))\\n  return (\\n    <FormContext onSubmit={onSubmit}>\\n      <Form>\\n        <Collection array name=\\\"tags\\\">\\n          <Input\\n            type=\\\"checkbox\\\"\\n            value=\\\"Blue\\\"\\n            checked\\n            placeholder=\\\"Tag Blue\\\"\\n          />\\n          <Input type=\\\"checkbox\\\" value=\\\"Red\\\" placeholder=\\\"Tag Red\\\" />\\n          <Input type=\\\"checkbox\\\" value=\\\"Pink\\\" placeholder=\\\"Tag Pink\\\" />\\n        </Collection>\\n        <button type=\\\"submit\\\">Submit</button>\\n      </Form>\\n      <Tags />\\n    </FormContext>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      FormContext,\n      Form,\n      asyncTestForm,\n      Submit,\n      Input,\n      useForm,\n      useSelector,\n      Collection,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n  {() => {\n        const Tags = () => {\n          const [tags = [], setTags] = useSelector(state => state.tags);\n\n          const resetTag = target => setTags(prev => prev.filter(val => val !== target));\n\n          return tags.map((tag, index) => <button type=\"button\" key={tag} onClick={() => resetTag(tag)}>\n        {`${tag} X`}\n        </button>);\n        };\n\n        const onSubmit = state => alert(JSON.stringify(state));\n\n        return <FormContext onSubmit={onSubmit} mdxType=\"FormContext\">\n        <Form mdxType=\"Form\">\n          <Collection array name=\"tags\" mdxType=\"Collection\">\n            <Input type=\"checkbox\" value=\"Blue\" checked placeholder=\"Tag Blue\" mdxType=\"Input\" />\n            <Input type=\"checkbox\" value=\"Red\" placeholder=\"Tag Red\" mdxType=\"Input\" />\n            <Input type=\"checkbox\" value=\"Pink\" placeholder=\"Tag Pink\" mdxType=\"Input\" />\n          </Collection>\n          <button type=\"submit\">Submit</button>\n        </Form>\n        <Tags mdxType=\"Tags\" />\n      </FormContext>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"reducers\"\n    }}>{`Reducers`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  import { FormContext, Input } from 'usetheform'\n`}</code></pre>\n    <Playground __position={1} __code={'() => {\\n  const maxNumber10 = (nextState, prevState) => {\\n    if (nextState.myNumber > 10) {\\n      nextState.myNumber = 10\\n    }\\n    return nextState\\n  }\\n  const minNumber1 = (nextState, prevState) => {\\n    if (nextState.myNumber <= 1) {\\n      nextState.myNumber = 1\\n    }\\n    return nextState\\n  }\\n  return (\\n    <FormContext reducers={[minNumber1, maxNumber10]}>\\n      <Form>\\n        <Input\\n          type=\\\"number\\\"\\n          name=\\\"anyNumber\\\"\\n          value=\\\"1\\\"\\n          placeholder=\\\"Number\\\"\\n        />\\n      </Form>\\n    </FormContext>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      FormContext,\n      Form,\n      asyncTestForm,\n      Submit,\n      Input,\n      useForm,\n      useSelector,\n      Collection,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const maxNumber10 = (nextState, prevState) => {\n          if (nextState.myNumber > 10) {\n            nextState.myNumber = 10;\n          }\n\n          return nextState;\n        };\n\n        const minNumber1 = (nextState, prevState) => {\n          if (nextState.myNumber <= 1) {\n            nextState.myNumber = 1;\n          }\n\n          return nextState;\n        };\n\n        return <FormContext reducers={[minNumber1, maxNumber10]} mdxType=\"FormContext\">\n        <Form mdxType=\"Form\">\n          <Input type=\"number\" name=\"anyNumber\" value=\"1\" placeholder=\"Number\" mdxType=\"Input\" />\n        </Form>\n      </FormContext>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation---sync\"\n    }}>{`Validation - Sync`}</h2>\n    <p>{`Validation at FormContext level:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`touched=false`}</strong>{`: error messages will be shown on FormContext initialization and when any Field is edited.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\">{`touched=true`}</strong>{`: error messages will be shown when any Field at any level of nesting is touched/visited.`}</li>\n    </ul>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import { FormContext, Input, Collection, useValidation } from 'usetheform'\n`}</code></pre>\n    <Playground __position={2} __code={'() => {\\n  const graterThan10 = ({ values }) =>\\n    values && values[\\'A\\'] + values[\\'B\\'] > 10 ? undefined : \\'A+B must be > 10\\'\\n  const [status, validationProps] = useValidation([graterThan10])\\n  return (\\n    <FormContext touched {...validationProps}>\\n      <Form>\\n        <Collection object name=\\\"values\\\">\\n          <Input type=\\\"number\\\" name=\\\"A\\\" placeholder=\\\"Number A\\\" value=\\\"1\\\" />\\n          <Input type=\\\"number\\\" name=\\\"B\\\" placeholder=\\\"Number B\\\" value=\\\"2\\\" />\\n        </Collection>\\n        {status.error && <label>{status.error}</label>}\\n        <button type=\\\"submit\\\">Press to see results</button>\\n      </Form>\\n    </FormContext>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      FormContext,\n      Form,\n      asyncTestForm,\n      Submit,\n      Input,\n      useForm,\n      useSelector,\n      Collection,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const graterThan10 = ({\n          values\n        }) => values && values[\"A\"] + values[\"B\"] > 10 ? undefined : \"A+B must be > 10\";\n\n        const [status, validationProps] = useValidation([graterThan10]);\n        return <FormContext touched {...validationProps} mdxType=\"FormContext\">\n        <Form mdxType=\"Form\">\n          <Collection object name=\"values\" mdxType=\"Collection\">\n            <Input type=\"number\" name=\"A\" placeholder=\"Number A\" value=\"1\" mdxType=\"Input\" />\n            <Input type=\"number\" name=\"B\" placeholder=\"Number B\" value=\"2\" mdxType=\"Input\" />\n          </Collection>\n          {status.error && <label>{status.error}</label>}\n          <button type=\"submit\">Press to see results</button>\n        </Form>\n      </FormContext>;\n      }}\n    </Playground>\n    <h2 {...{\n      \"id\": \"validation---async\"\n    }}>{`Validation - Async`}</h2>\n    <p>{`Async Validation for `}<strong parentName=\"p\">{`FormContext`}</strong>{` is triggered on the Submit event. The form submission is prevented if the validation fails.\nThis means that the onSubmit function passed as a prop to the `}<strong parentName=\"p\">{`FormContext`}</strong>{` component will not be invoked.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { FormContext, Collection, Input, useAsyncValidation } from 'usetheform';\n`}</code></pre>\n    <Playground __position={3} __code={'() => {\\n  const [asyncStatus, validationProps] = useAsyncValidation(asyncTestForm)\\n  const onSubmit = state => alert(JSON.stringify(state))\\n  return (\\n    <FormContext onSubmit={onSubmit} {...validationProps}>\\n      <Form>\\n        <Collection object name=\\\"values\\\">\\n          <Input type=\\\"number\\\" name=\\\"a\\\" placeholder=\\\"Number A\\\" value=\\\"1\\\" />\\n          <Input type=\\\"number\\\" name=\\\"b\\\" placeholder=\\\"Number B\\\" value=\\\"2\\\" />\\n        </Collection>\\n        {asyncStatus.status === undefined && (\\n          <label>Async Check Not Started Yet</label>\\n        )}\\n        {asyncStatus.status === \\'asyncStart\\' && <label>Checking...</label>}\\n        {asyncStatus.status === \\'asyncError\\' && (\\n          <label>{asyncStatus.value}</label>\\n        )}\\n        {asyncStatus.status === \\'asyncSuccess\\' && (\\n          <label>{asyncStatus.value}</label>\\n        )}\\n        <Submit />\\n      </Form>\\n    </FormContext>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      FormContext,\n      Form,\n      asyncTestForm,\n      Submit,\n      Input,\n      useForm,\n      useSelector,\n      Collection,\n      useValidation,\n      useAsyncValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const [asyncStatus, validationProps] = useAsyncValidation(asyncTestForm);\n\n        const onSubmit = state => alert(JSON.stringify(state));\n\n        return <FormContext onSubmit={onSubmit} {...validationProps} mdxType=\"FormContext\">\n        <Form mdxType=\"Form\">\n          <Collection object name=\"values\" mdxType=\"Collection\">\n            <Input type=\"number\" name=\"a\" placeholder=\"Number A\" value=\"1\" mdxType=\"Input\" />\n            <Input type=\"number\" name=\"b\" placeholder=\"Number B\" value=\"2\" mdxType=\"Input\" />\n          </Collection>\n          {asyncStatus.status === undefined && <label>Async Check Not Started Yet</label>}\n          {asyncStatus.status === \"asyncStart\" && <label>Checking...</label>}\n          {asyncStatus.status === \"asyncError\" && <label>{asyncStatus.value}</label>}\n          {asyncStatus.status === \"asyncSuccess\" && <label>{asyncStatus.value}</label>}\n          <Submit mdxType=\"Submit\" />\n        </Form>\n      </FormContext>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"detailed-explanation\"\n    }}>{`Detailed Explanation:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { useForm } from 'usetheform'\n\nconst Submit = () => {\n  const { isValid } = useForm();\n  return (\n    <button disabled={!isValid} type=\"submit\">\n      Submit\n    </button>\n  );\n};\n\nexport const asyncTestForm = ({ values }) =>\n  new Promise((resolve, reject) => {\n    // it could be an API call or any async operation\n    setTimeout(() => {\n      if (!values || !values.a || !values.b) {\n        reject(\"Emtpy values are not allowed \");\n      }\n      if (values.a + values.b >= 5) {\n        reject(\"The sum must be less than '5'\");\n      } else {\n        resolve(\"Success\");\n      }\n    }, 1000);\n  });\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}