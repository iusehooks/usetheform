(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{"/xLh":function(e,t,a){"use strict";a.r(t),a.d(t,"_frontmatter",(function(){return i})),a.d(t,"default",(function(){return d}));var n=a("Fcif"),r=a("+I+c"),o=(a("mXGw"),a("/FXl")),l=a("TjRS"),c=a("ZFoC"),b=a("RnGj"),u=a("Hn4R"),s=a("oXiK"),i=(a("aD51"),{});void 0!==i&&i&&i===Object(i)&&Object.isExtensible(i)&&!i.hasOwnProperty("__filemeta")&&Object.defineProperty(i,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/TextArea.mdx"}});var m={_frontmatter:i},p=l.a;function d(e){var t,a,d,j,O=e.components,f=Object(r.a)(e,["components"]);return Object(o.b)(p,Object(n.a)({},m,f,{components:O,mdxType:"MDXLayout"}),Object(o.b)("h1",{id:"textarea"},"TextArea"),Object(o.b)("p",null,"Renders a ",Object(o.b)("em",{parentName:"p"},"textarea")," element (",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.w3schools.com/tags/tag_textarea.asp"}),"W3schools Textarea"),") and accepts as props any html attribute listed at: ",Object(o.b)("a",Object(n.a)({parentName:"p"},{href:"https://www.w3schools.com/tags/tag_textarea.asp"}),"Html Textarea Attributes"),"."),Object(o.b)("h2",{id:"props"},"Props"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"name")),": string"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A field's name in Usetheform state. ",Object(o.b)("br",null)),Object(o.b)("li",{parentName:"ul"},"If the TextArea is rendered within a ",Object(o.b)("inlineCode",{parentName:"li"},"<Collection array />"),", ",Object(o.b)("strong",{parentName:"li"},"name")," is not allowed as a prop.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"index")),": string"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"A field's index in array Collection. ",Object(o.b)("br",null)),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"index")," is only allowed if your TextArea is rendered within a ",Object(o.b)("inlineCode",{parentName:"li"},"<Collection array /> "),".")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"value")),": string"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"Specifies the initial value of an ",Object(o.b)("em",{parentName:"li"},"textarea")," element.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"touched")),": boolean"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"A field that has been touched/visited. Default value of ",Object(o.b)("em",{parentName:"p"},"false"),". ")),Object(o.b)("li",{parentName:"ul"},Object(o.b)("p",{parentName:"li"},"If ",Object(o.b)("em",{parentName:"p"},"true"),", validation messages (sync and async) will be shown but only when the event onBlur of the field is triggered by a user action."))),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"reducers")),": array | function"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"(nextValue, prevValue, formState) => nextValue\n")),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"An array whose values correspond to different reducing functions."),Object(o.b)("li",{parentName:"ul"},"Reducer functions specify how the TextArea's value change.")),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},Object(o.b)("inlineCode",{parentName:"strong"},"innerRef")),": object (a mutable ref object)"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},"When you need to access the underlying DOM node created by TextArea (e.g. to call focus), you can use a ref to store a reference to the textarea dom node.")),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),'const ref = useRef(null)\n<TextArea innerRef={ref} name="textarea" value="test" />\n')),Object(o.b)("h2",{id:"basic-usage"},"Basic usage"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"  import { Form, TextArea } from 'usetheform'\n")),Object(o.b)(c.b,{__position:0,__code:'<Form>\n  <TextArea name="textarea" value="foo" />\n</Form>',__scope:(t={props:f,DefaultLayout:l.a,Playground:c.b,Form:b.a,Submit:u.a,TextArea:s.f,useValidation:s.m,useAsyncValidation:s.h},t.DefaultLayout=l.a,t._frontmatter=i,t),mdxType:"Playground"},Object(o.b)(b.a,{mdxType:"Form"},Object(o.b)(s.f,{name:"textarea",value:"foo",mdxType:"TextArea"}))),Object(o.b)("h2",{id:"reducers"},"Reducers"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"  import { Form, TextArea } from 'usetheform'\n")),Object(o.b)(c.b,{__position:1,__code:"() => {\n  const noHtmlTags = (nextValue, prevValue) =>\n    nextValue.replace(/(<([^>]+)>)/gi, '')\n  const notNumber = (nextValue, prevValue) =>\n    nextValue.replace(/[0-9]+/gi, '')\n  return (\n    <Form>\n      <TextArea\n        name=\"textareaReducer\"\n        reducers={[noHtmlTags, notNumber]}\n        value=\"foo\"\n      />\n    </Form>\n  )\n}",__scope:(a={props:f,DefaultLayout:l.a,Playground:c.b,Form:b.a,Submit:u.a,TextArea:s.f,useValidation:s.m,useAsyncValidation:s.h},a.DefaultLayout=l.a,a._frontmatter=i,a),mdxType:"Playground"},(function(){return Object(o.b)(b.a,{mdxType:"Form"},Object(o.b)(s.f,{name:"textareaReducer",reducers:[function(e,t){return e.replace(/(<([^>]+)>)/gi,"")},function(e,t){return e.replace(/[0-9]+/gi,"")}],value:"foo",mdxType:"TextArea"}))})),Object(o.b)("h2",{id:"validation---sync"},"Validation - Sync"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"  import { useValidation } from 'usetheform'\n")),Object(o.b)(c.b,{__position:2,__code:"() => {\n  const notNumber = value =>\n    !(value && !/^[A-Za-z ]+$/i.test(value))\n      ? undefined\n      : 'Numbers not allowed'\n  const required = value =>\n    value && value.trim() !== '' ? undefined : 'Required'\n  const [status, validation] = useValidation([required, notNumber])\n  return (\n    <Form>\n      <TextArea name=\"notEmpty\" touched {...validation} />\n      {status.error && <label>{status.error}</label>}\n    </Form>\n  )\n}",__scope:(d={props:f,DefaultLayout:l.a,Playground:c.b,Form:b.a,Submit:u.a,TextArea:s.f,useValidation:s.m,useAsyncValidation:s.h},d.DefaultLayout=l.a,d._frontmatter=i,d),mdxType:"Playground"},(function(){var e=Object(s.m)([function(e){return e&&""!==e.trim()?void 0:"Required"},function(e){return!e||/^[A-Za-z ]+$/i.test(e)?void 0:"Numbers not allowed"}]),t=e[0],a=e[1];return Object(o.b)(b.a,{mdxType:"Form"},Object(o.b)(s.f,Object(n.a)({name:"notEmpty",touched:!0},a,{mdxType:"TextArea"})),t.error&&Object(o.b)("label",null,t.error))})),Object(o.b)("h2",{id:"validation---async"},"Validation - Async"),Object(o.b)("pre",null,Object(o.b)("code",Object(n.a)({parentName:"pre"},{className:"language-javascript"}),"import { useAsyncValidation, useForm } from 'usetheform'\n\nconst Submit = () => {\n  const { isValid } = useForm();\n  return (\n    <button disabled={!isValid} type=\"submit\">\n      Submit\n    </button>\n  );\n};\n\n")),Object(o.b)(c.b,{__position:3,__code:"() => {\n  const asyncTest = value =>\n    new Promise((resolve, reject) => {\n      // it could be an API call or any async operation\n      setTimeout(() => {\n        if (value === 'foo') {\n          reject('text not allowed')\n        } else {\n          resolve('Success')\n        }\n      }, 1000)\n    })\n  const [asyncStatus, asyncValidation] = useAsyncValidation(asyncTest)\n  return (\n    <Form>\n      <TextArea name=\"text\" touched {...asyncValidation} />\n      {asyncStatus.status === undefined && (\n        <label>Async Check Not Started Yet</label>\n      )}\n      {asyncStatus.status === 'asyncStart' && <label>Checking...</label>}\n      {asyncStatus.status === 'asyncError' && (\n        <label>{asyncStatus.value}</label>\n      )}\n      {asyncStatus.status === 'asyncSuccess' && (\n        <label>{asyncStatus.value}</label>\n      )}\n      <br />\n      <Submit />\n    </Form>\n  )\n}",__scope:(j={props:f,DefaultLayout:l.a,Playground:c.b,Form:b.a,Submit:u.a,TextArea:s.f,useValidation:s.m,useAsyncValidation:s.h},j.DefaultLayout=l.a,j._frontmatter=i,j),mdxType:"Playground"},(function(){var e=Object(s.h)((function(e){return new Promise((function(t,a){setTimeout((function(){"foo"===e?a("text not allowed"):t("Success")}),1e3)}))})),t=e[0],a=e[1];return Object(o.b)(b.a,{mdxType:"Form"},Object(o.b)(s.f,Object(n.a)({name:"text",touched:!0},a,{mdxType:"TextArea"})),void 0===t.status&&Object(o.b)("label",null,"Async Check Not Started Yet"),"asyncStart"===t.status&&Object(o.b)("label",null,"Checking..."),"asyncError"===t.status&&Object(o.b)("label",null,t.value),"asyncSuccess"===t.status&&Object(o.b)("label",null,t.value),Object(o.b)("br",null),Object(o.b)(u.a,{mdxType:"Submit"}))})))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/TextArea.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-text-area-mdx-c8a128b185196b021ffb.js.map