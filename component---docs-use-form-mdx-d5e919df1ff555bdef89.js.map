{"version":3,"sources":["webpack:///../docs/useForm.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","__position","__code","__scope","Playground","Form","Submit","Reset","CounterSubmitAttempts","Input","useValidation","val","trim","undefined","value","test","status","validation","initialState","email","type","name","placeholder","touched","error","isMDXComponent"],"mappings":"4UAeaA,G,UAAe,S,kMAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,MAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,WADR,WAGA,qBAAG,0BAAYC,WAAW,KAAvB,aAAH,uFACA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,gBADZ,+GAIL,iBAAQ,CACN,GAAM,WADR,WAGA,yBAAQ,sBAAQA,WAAW,KAAI,0BAAYA,WAAW,UAAvB,YAA/B,aACA,8CACA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,UAA5C,2CACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,YAA5C,mGACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,aAA5C,mFACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,cAA5C,2FACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,mBAA5C,sEACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,UAA5C,0EACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,eAA5C,kHACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAK,0BAAYA,WAAW,UAAvB,aAA5C,4GACE,mBAAKA,WAAW,MAAK,gCAAMA,WAAW,OAAU,CAC5C,UAAa,wBADI,mDAMzB,8BACE,iBAAGA,WAAW,cAAa,sBAAQA,WAAW,KAAnB,OAA3B,yEAEF,iBAAQ,CACN,GAAM,eADR,eAGA,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,iDAIL,YAAC,IAAD,CAAYC,WAAY,EAAGC,OAAQ,ipBAA0pBC,SAAO,GAClsBL,QACAH,kBACAS,eACAC,SACAC,WACAC,UACAC,0BACAC,UACAC,mBATksB,gBAUlsBf,IAVksB,EAWlsBH,eAXksB,GAYjsBO,QAAQ,eACR,WACC,IADK,EAKwBW,YAAc,CAF1B,SAAAC,GAAG,OAAIA,GAAsB,KAAfA,EAAIC,YAAgBC,EAAY,YAFjD,SAAAC,GAAK,OAAMA,GAAU,4CAA4CC,KAAKD,QAAUD,EAAY,oBAInGG,EALF,KAKUC,EALV,KAML,OAAO,YAAC,IAAD,CAAMC,aAAc,CACzBC,MAAO,kBACNpB,QAAQ,QACX,YAAC,IAAD,aAAOqB,KAAK,OAAOC,KAAK,QAAQC,YAAY,QAAQC,SAAO,GAAKN,EAAhE,CAA4ElB,QAAQ,WACnFiB,EAAOQ,OAAS,yBAAQR,EAAOQ,OAChC,YAAC,IAAD,CAAQzB,QAAQ,WAChB,YAAC,IAAD,CAAOA,QAAQ,UACf,YAAC,IAAD,CAAuBA,QAAQ,8BAInC,iBAAQ,CACN,GAAM,wBADR,yBAGA,uBAAK,gCAAMC,WAAW,OAAU,CAC5B,UAAa,wBADZ,0LAWL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,mKAWL,uBAAK,gCAAMA,WAAW,OAAU,CAC5B,UAAa,wBADZ,sK,gMAeTJ,EAAW6B,gBAAiB","file":"component---docs-use-form-mdx-d5e919df1ff555bdef89.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/usetheform/usetheform/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Playground } from 'docz';\nimport { Form } from \"./helpers/Form\";\nimport { Submit } from \"./helpers/Submit\";\nimport { Reset } from \"./helpers/Reset\";\nimport { CounterSubmitAttempts } from \"./helpers/CounterSubmitAttempts\";\nimport { InputLabel as Input } from \"./helpers/InputLabel\";\nimport { useValidation } from './../src';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"useform\"\n    }}>{`useForm`}</h1>\n    <p><inlineCode parentName=\"p\">{`useForm()`}</inlineCode>{` is a custom React hook that will return helpers and the current state of the form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-js\"\n      }}>{`  const { state, isValid, pristine, submitted, submitAttempts, reset, formStatus, dispatch } = useForm()\n`}</code></pre>\n    <h2 {...{\n      \"id\": \"returns\"\n    }}>{`Returns`}</h2>\n    <p>{`(`}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`helpers`}</inlineCode></strong>{`): object`}</p>\n    <p>{`An object that holds:`}</p>\n    <ul>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`state`}</inlineCode></strong>{`: the current state of the entire form.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`isValid`}</inlineCode></strong>{`: a boolean value indicating whether the form has passed all the validation constraints or not.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`pristine`}</inlineCode></strong>{`: a boolean value indicating whether the form fields have been modified or not.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`submitted`}</inlineCode></strong>{`: an integer which counts the number of times the form has been submitted with success.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`submitAttempts`}</inlineCode></strong>{`: an integer which counts the total number of submission attempts.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`reset`}</inlineCode></strong>{`: a helper function which resets the form's state to an initial State.`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`formStatus`}</inlineCode></strong>{`: a string indicating the form's status. Can be a status of: \"ON_CHANGE\", \"ON_SUBMIT\", \"ON_RESET\", \"ON_INIT\".`}</li>\n      <li parentName=\"ul\"><strong parentName=\"li\"><inlineCode parentName=\"strong\">{`dispatch`}</inlineCode></strong>{`: a function used to update the form's state. It accepts object, which will be the new state of the form.`}\n        <pre parentName=\"li\"><code parentName=\"pre\" {...{\n            \"className\": \"language-javascript\"\n          }}>{`  dispatch(prev => ({ ...prev, newProp }))\n`}</code></pre>\n      </li>\n    </ul>\n    <blockquote>\n      <p parentName=\"blockquote\"><strong parentName=\"p\">{`Tip`}</strong>{`: formStatus can be imported => import { STATUS } from \"usetheform\".`}</p>\n    </blockquote>\n    <h2 {...{\n      \"id\": \"basic-usage\"\n    }}>{`Basic usage`}</h2>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`  import { Form, Input } from 'usetheform'\n`}</code></pre>\n    <Playground __position={0} __code={'() => {\\n  const email = value =>\\n    !(value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[A-Z]{2,4}$/i.test(value))\\n      ? undefined\\n      : \\'Mail not Valid\\'\\n  const required = val => (val && val.trim() !== \\'\\' ? undefined : \\'Required\\')\\n  const [status, validation] = useValidation([required, email])\\n\\n  return (\\n    <Form initialState={{ email: \\'foo@google.com\\' }}>\\n      <Input\\n        type=\\\"text\\\"\\n        name=\\\"email\\\"\\n        placeholder=\\\"Email\\\"\\n        touched\\n        {...validation}\\n      />\\n      {status.error && <label>{status.error}</label>}\\n      <Submit />\\n      <Reset />\\n      <CounterSubmitAttempts />\\n    </Form>\\n  )\\n}'} __scope={{\n      props,\n      DefaultLayout,\n      Playground,\n      Form,\n      Submit,\n      Reset,\n      CounterSubmitAttempts,\n      Input,\n      useValidation,\n      DefaultLayout,\n      _frontmatter\n    }} mdxType=\"Playground\">\n      {() => {\n        const email = value => !(value && !/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(value)) ? undefined : \"Mail not Valid\";\n\n        const required = val => val && val.trim() !== \"\" ? undefined : \"Required\";\n\n        const [status, validation] = useValidation([required, email]);\n        return <Form initialState={{\n          email: \"foo@google.com\"\n        }} mdxType=\"Form\">\n        <Input type=\"text\" name=\"email\" placeholder=\"Email\" touched {...validation} mdxType=\"Input\" />\n        {status.error && <label>{status.error}</label>}\n        <Submit mdxType=\"Submit\" />\n        <Reset mdxType=\"Reset\" />\n        <CounterSubmitAttempts mdxType=\"CounterSubmitAttempts\" />\n      </Form>;\n      }}\n    </Playground>\n    <h4 {...{\n      \"id\": \"detailed-explanation\"\n    }}>{`Detailed Explanation:`}</h4>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Reset = props => {\n  const { reset, pristine } = useForm();\n  return (\n    <button disabled={pristine} type=\"button\" onClick={reset}>\n      Reset\n    </button>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const Submit = props => {\n const { isValid } = useForm();\n  return (\n    <button disabled={!isValid} type=\"submit\">\n      Submit\n    </button>\n  );\n}\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const CounterSubmitAttempts = props => {\n  const { submitAttempts } = useForm();\n  return (\n    <span>\n      {submitAttempts}\n    </button>\n  );\n}\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}