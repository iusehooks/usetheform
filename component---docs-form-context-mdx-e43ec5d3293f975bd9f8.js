(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{hRQU:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return p})),n.d(t,"default",(function(){return y}));var a=n("Fcif"),o=n("+I+c"),r=(n("mXGw"),n("/FXl")),l=n("TjRS"),b=n("ZFoC"),u=n("BjnV"),c=n("cMsH"),s=n("Hn4R"),i=n("8xEu"),m=n("oXiK"),p=(n("aD51"),{});void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"docs/FormContext.mdx"}});d="Tags";var d,j={_frontmatter:p},O=l.a;function y(e){var t,n,d,y,f=e.components,h=Object(o.a)(e,["components"]);return Object(r.b)(O,Object(a.a)({},j,h,{components:f,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"formcontext"},"FormContext"),Object(r.b)("p",null,'A React component that provides a more in-depth context of the "Form".'),Object(r.b)("h2",{id:"props"},"Props"),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"onInit")),": function"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A function invoked when the Form is initialized.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const onInit = (formState, isFormValid) => { // some operation }\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"onChange")),": function"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A function invoked when any Form Field changes its value.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const onChange = (formState, isFormValid) => { // some operation }\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"onReset")),": function"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A function invoked when the form has been reset to its initial State.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"const onReset = (formState, isFormValid) => { // some operation }\n")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"onSubmit")),": function"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"A function invoked when the submit button has been pressed. "),Object(r.b)("li",{parentName:"ul"},"The function may return either a Promise or a boolean value of true/false.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const onSubmit = (formState) => { // some operation };\nconst onSubmit = (formState) => new Promise((resolve, reject) => { // some async operation  });\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"Cases:",Object(r.b)("ul",{parentName:"li"},Object(r.b)("li",{parentName:"ul"},"If the function returns a Promise which is resolved, it will increment the value named ",Object(r.b)("strong",{parentName:"li"},"submitted"),"."),Object(r.b)("li",{parentName:"ul"},"If the function returns a boolean value ",Object(r.b)("inlineCode",{parentName:"li"},"true"),", or no return at all, it will increment the value named ",Object(r.b)("strong",{parentName:"li"},"submitted"),"."),Object(r.b)("li",{parentName:"ul"},"If the function returns a Promise which is rejected, the value named ",Object(r.b)("strong",{parentName:"li"},"submitted")," will not be incremented."),Object(r.b)("li",{parentName:"ul"},"If the function returns a boolean value ",Object(r.b)("inlineCode",{parentName:"li"},"false"),", the value named ",Object(r.b)("strong",{parentName:"li"},"submitted")," will not be incremented.")))),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"  const { submitted, submitAttempts } = useForm();\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"It will be only invoked if your form passes all validations added at any level (Collections or Fields)."),Object(r.b)("li",{parentName:"ul"},"For each invocation, the value ",Object(r.b)("strong",{parentName:"li"},"submitAttempts")," will be incremented.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"initialState")),": object"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"It is a plain object that represents the initial state of the form.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"reducers")),": array | function"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"(nextState, prevState) => nextState\n")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},"An array whose values correspond to different reducer functions."),Object(r.b)("li",{parentName:"ul"},"Reducer functions specify how the Form's state changes.")),Object(r.b)("p",null,Object(r.b)("strong",{parentName:"p"},Object(r.b)("inlineCode",{parentName:"strong"},"touched")),": boolean"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"Default value of ",Object(r.b)("em",{parentName:"p"},"false"),". ")),Object(r.b)("li",{parentName:"ul"},Object(r.b)("p",{parentName:"li"},"If ",Object(r.b)("em",{parentName:"p"},"true"),", sync validation messages will be shown but only when the event onBlur of any forms's field is triggered by a user action at any level of nesting."))),Object(r.b)("h2",{id:"basic-usage"},"Basic usage"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"import { useForm } from 'usetheform'\nexport const Form = ({ children }) => {\n  const { onSubmitForm } = useForm();\n  return (\n    <form onSubmit={onSubmitForm}>\n      {children}\n    </form>\n  );\n};\n")),Object(r.b)(b.b,{__position:0,__code:'() => {\n  const Tags = () => {\n    const [tags = [], setTags] = useSelector(state => state.tags)\n    const resetTag = target =>\n      setTags(prev => prev.filter(val => val !== target))\n    return tags.map((tag, index) => (\n      <button type="button" key={tag} onClick={() => resetTag(tag)}>\n        {`${tag} X`}\n      </button>\n    ))\n  }\n  const onSubmit = state => alert(JSON.stringify(state))\n  return (\n    <FormContext onSubmit={onSubmit}>\n      <Form>\n        <Collection array name="tags">\n          <Input\n            type="checkbox"\n            value="Blue"\n            checked\n            placeholder="Tag Blue"\n          />\n          <Input type="checkbox" value="Red" placeholder="Tag Red" />\n          <Input type="checkbox" value="Pink" placeholder="Tag Pink" />\n        </Collection>\n        <button type="submit">Submit</button>\n      </Form>\n      <Tags />\n    </FormContext>\n  )\n}',__scope:(t={props:h,DefaultLayout:l.a,Playground:b.b,FormContext:u.b,Form:u.a,asyncTestForm:c.a,Submit:s.a,Input:i.a,useForm:m.j,useSelector:m.l,Collection:m.a,useValidation:m.m,useAsyncValidation:m.h},t.DefaultLayout=l.a,t._frontmatter=p,t),mdxType:"Playground"},(function(){return Object(r.b)(u.b,{onSubmit:function(e){return alert(JSON.stringify(e))},mdxType:"FormContext"},Object(r.b)(u.a,{mdxType:"Form"},Object(r.b)(m.a,{array:!0,name:"tags",mdxType:"Collection"},Object(r.b)(i.a,{type:"checkbox",value:"Blue",checked:!0,placeholder:"Tag Blue",mdxType:"Input"}),Object(r.b)(i.a,{type:"checkbox",value:"Red",placeholder:"Tag Red",mdxType:"Input"}),Object(r.b)(i.a,{type:"checkbox",value:"Pink",placeholder:"Tag Pink",mdxType:"Input"})),Object(r.b)("button",{type:"submit"},"Submit")),Object(r.b)((function(){var e=Object(m.l)((function(e){return e.tags})),t=e[0],n=void 0===t?[]:t,a=e[1];return n.map((function(e,t){return Object(r.b)("button",{type:"button",key:e,onClick:function(){return t=e,a((function(e){return e.filter((function(e){return e!==t}))}));var t}},e+" X")}))}),{mdxType:"Tags"}))})),Object(r.b)("h2",{id:"reducers"},"Reducers"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"  import { FormContext, Input } from 'usetheform'\n")),Object(r.b)(b.b,{__position:1,__code:'() => {\n  const maxNumber10 = (nextState, prevState) => {\n    if (nextState.myNumber > 10) {\n      nextState.myNumber = 10\n    }\n    return nextState\n  }\n  const minNumber1 = (nextState, prevState) => {\n    if (nextState.myNumber <= 1) {\n      nextState.myNumber = 1\n    }\n    return nextState\n  }\n  return (\n    <FormContext reducers={[minNumber1, maxNumber10]}>\n      <Form>\n        <Input\n          type="number"\n          name="anyNumber"\n          value="1"\n          placeholder="Number"\n        />\n      </Form>\n    </FormContext>\n  )\n}',__scope:(n={props:h,DefaultLayout:l.a,Playground:b.b,FormContext:u.b,Form:u.a,asyncTestForm:c.a,Submit:s.a,Input:i.a,useForm:m.j,useSelector:m.l,Collection:m.a,useValidation:m.m,useAsyncValidation:m.h},n.DefaultLayout=l.a,n._frontmatter=p,n),mdxType:"Playground"},(function(){return Object(r.b)(u.b,{reducers:[function(e,t){return e.myNumber<=1&&(e.myNumber=1),e},function(e,t){return e.myNumber>10&&(e.myNumber=10),e}],mdxType:"FormContext"},Object(r.b)(u.a,{mdxType:"Form"},Object(r.b)(i.a,{type:"number",name:"anyNumber",value:"1",placeholder:"Number",mdxType:"Input"})))})),Object(r.b)("h2",{id:"validation---sync"},"Validation - Sync"),Object(r.b)("p",null,"Validation at FormContext level:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"touched=false"),": error messages will be shown on FormContext initialization and when any Field is edited."),Object(r.b)("li",{parentName:"ul"},Object(r.b)("strong",{parentName:"li"},"touched=true"),": error messages will be shown when any Field at any level of nesting is touched/visited.")),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"  import { FormContext, Input, Collection, useValidation } from 'usetheform'\n")),Object(r.b)(b.b,{__position:2,__code:'() => {\n  const graterThan10 = ({ values }) =>\n    values && values[\'A\'] + values[\'B\'] > 10 ? undefined : \'A+B must be > 10\'\n  const [status, validationProps] = useValidation([graterThan10])\n  return (\n    <FormContext touched {...validationProps}>\n      <Form>\n        <Collection object name="values">\n          <Input type="number" name="A" placeholder="Number A" value="1" />\n          <Input type="number" name="B" placeholder="Number B" value="2" />\n        </Collection>\n        {status.error && <label>{status.error}</label>}\n        <button type="submit">Press to see results</button>\n      </Form>\n    </FormContext>\n  )\n}',__scope:(d={props:h,DefaultLayout:l.a,Playground:b.b,FormContext:u.b,Form:u.a,asyncTestForm:c.a,Submit:s.a,Input:i.a,useForm:m.j,useSelector:m.l,Collection:m.a,useValidation:m.m,useAsyncValidation:m.h},d.DefaultLayout=l.a,d._frontmatter=p,d),mdxType:"Playground"},(function(){var e=Object(m.m)([function(e){var t=e.values;return t&&t.A+t.B>10?void 0:"A+B must be > 10"}]),t=e[0],n=e[1];return Object(r.b)(u.b,Object(a.a)({touched:!0},n,{mdxType:"FormContext"}),Object(r.b)(u.a,{mdxType:"Form"},Object(r.b)(m.a,{object:!0,name:"values",mdxType:"Collection"},Object(r.b)(i.a,{type:"number",name:"A",placeholder:"Number A",value:"1",mdxType:"Input"}),Object(r.b)(i.a,{type:"number",name:"B",placeholder:"Number B",value:"2",mdxType:"Input"})),t.error&&Object(r.b)("label",null,t.error),Object(r.b)("button",{type:"submit"},"Press to see results")))})),Object(r.b)("h2",{id:"validation---async"},"Validation - Async"),Object(r.b)("p",null,"Async Validation for ",Object(r.b)("strong",{parentName:"p"},"FormContext")," is triggered on the Submit event. The form submission is prevented if the validation fails.\nThis means that the onSubmit function passed as a prop to the ",Object(r.b)("strong",{parentName:"p"},"FormContext")," component will not be invoked."),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),"import { FormContext, Collection, Input, useAsyncValidation } from 'usetheform';\n")),Object(r.b)(b.b,{__position:3,__code:'() => {\n  const [asyncStatus, validationProps] = useAsyncValidation(asyncTestForm)\n  const onSubmit = state => alert(JSON.stringify(state))\n  return (\n    <FormContext onSubmit={onSubmit} {...validationProps}>\n      <Form>\n        <Collection object name="values">\n          <Input type="number" name="a" placeholder="Number A" value="1" />\n          <Input type="number" name="b" placeholder="Number B" value="2" />\n        </Collection>\n        {asyncStatus.status === undefined && (\n          <label>Async Check Not Started Yet</label>\n        )}\n        {asyncStatus.status === \'asyncStart\' && <label>Checking...</label>}\n        {asyncStatus.status === \'asyncError\' && (\n          <label>{asyncStatus.value}</label>\n        )}\n        {asyncStatus.status === \'asyncSuccess\' && (\n          <label>{asyncStatus.value}</label>\n        )}\n        <Submit />\n      </Form>\n    </FormContext>\n  )\n}',__scope:(y={props:h,DefaultLayout:l.a,Playground:b.b,FormContext:u.b,Form:u.a,asyncTestForm:c.a,Submit:s.a,Input:i.a,useForm:m.j,useSelector:m.l,Collection:m.a,useValidation:m.m,useAsyncValidation:m.h},y.DefaultLayout=l.a,y._frontmatter=p,y),mdxType:"Playground"},(function(){var e=Object(m.h)(c.a),t=e[0],n=e[1];return Object(r.b)(u.b,Object(a.a)({onSubmit:function(e){return alert(JSON.stringify(e))}},n,{mdxType:"FormContext"}),Object(r.b)(u.a,{mdxType:"Form"},Object(r.b)(m.a,{object:!0,name:"values",mdxType:"Collection"},Object(r.b)(i.a,{type:"number",name:"a",placeholder:"Number A",value:"1",mdxType:"Input"}),Object(r.b)(i.a,{type:"number",name:"b",placeholder:"Number B",value:"2",mdxType:"Input"})),void 0===t.status&&Object(r.b)("label",null,"Async Check Not Started Yet"),"asyncStart"===t.status&&Object(r.b)("label",null,"Checking..."),"asyncError"===t.status&&Object(r.b)("label",null,t.value),"asyncSuccess"===t.status&&Object(r.b)("label",null,t.value),Object(r.b)(s.a,{mdxType:"Submit"})))})),Object(r.b)("h4",{id:"detailed-explanation"},"Detailed Explanation:"),Object(r.b)("pre",null,Object(r.b)("code",Object(a.a)({parentName:"pre"},{className:"language-javascript"}),'import { useForm } from \'usetheform\'\n\nconst Submit = () => {\n  const { isValid } = useForm();\n  return (\n    <button disabled={!isValid} type="submit">\n      Submit\n    </button>\n  );\n};\n\nexport const asyncTestForm = ({ values }) =>\n  new Promise((resolve, reject) => {\n    // it could be an API call or any async operation\n    setTimeout(() => {\n      if (!values || !values.a || !values.b) {\n        reject("Emtpy values are not allowed ");\n      }\n      if (values.a + values.b >= 5) {\n        reject("The sum must be less than \'5\'");\n      } else {\n        resolve("Success");\n      }\n    }, 1000);\n  });\n')))}void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&!y.hasOwnProperty("__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"docs/FormContext.mdx"}}),y.isMDXComponent=!0}}]);
//# sourceMappingURL=component---docs-form-context-mdx-e43ec5d3293f975bd9f8.js.map